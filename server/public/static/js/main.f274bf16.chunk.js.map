{"version":3,"sources":["index.js"],"names":["document","addEventListener","createNoteButton","getElementById","saveNoteButton","noteForm","notesContainer","loginButton","registerButton","loginSubmitButton","registerSubmitButton","logoutButton","loginForm","registerForm","authForms","authNav","userNav","selectedColor","API_BASE_URL","async","fetchNotes","response","fetch","concat","headers","localStorage","getItem","json","forEach","note","renderNote","noteElement","createElement","className","style","backgroundColor","color","innerHTML","title","tags","join","content","reminder","Date","toLocaleString","appendChild","display","username","value","password","method","body","JSON","stringify","ok","data","setItem","token","alert","removeItem","split","map","tag","trim","querySelectorAll","button","event","target","getAttribute"],"mappings":"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","file":"static/js/main.f274bf16.chunk.js","sourcesContent":["document.addEventListener('DOMContentLoaded', () => {\r\n    const createNoteButton = document.getElementById('create-note');\r\n    const saveNoteButton = document.getElementById('save-note');\r\n    const noteForm = document.getElementById('note-form');\r\n    const notesContainer = document.getElementById('notes-container');\r\n    const loginButton = document.getElementById('login-button');\r\n    const registerButton = document.getElementById('register-button');\r\n    const loginSubmitButton = document.getElementById('login-submit');\r\n    const registerSubmitButton = document.getElementById('register-submit');\r\n    const logoutButton = document.getElementById('logout-button');\r\n    const loginForm = document.getElementById('login-form');\r\n    const registerForm = document.getElementById('register-form');\r\n    const authForms = document.getElementById('auth-forms');\r\n    const authNav = document.getElementById('auth-nav');\r\n    const userNav = document.getElementById('user-nav');\r\n    let selectedColor = '#ffffff';\r\n  \r\n    const API_BASE_URL = 'http://localhost:3000'; // Ensure this matches your backend server's URL\r\n  \r\n    loginButton.addEventListener('click', () => {\r\n      loginForm.style.display = 'block';\r\n      registerForm.style.display = 'none';\r\n    });\r\n  \r\n    registerButton.addEventListener('click', () => {\r\n      registerForm.style.display = 'block';\r\n      loginForm.style.display = 'none';\r\n    });\r\n  \r\n    loginSubmitButton.addEventListener('click', async () => {\r\n      const username = document.getElementById('login-username').value;\r\n      const password = document.getElementById('login-password').value;\r\n  \r\n      const response = await fetch(`${API_BASE_URL}/login`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({ username, password })\r\n      });\r\n  \r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        localStorage.setItem('token', data.token);\r\n        authForms.style.display = 'none';\r\n        authNav.style.display = 'none';\r\n        userNav.style.display = 'flex';\r\n        fetchNotes();\r\n      } else {\r\n        alert('Login failed');\r\n      }\r\n    });\r\n  \r\n    registerSubmitButton.addEventListener('click', async () => {\r\n      const username = document.getElementById('register-username').value;\r\n      const password = document.getElementById('register-password').value;\r\n  \r\n      const response = await fetch(`${API_BASE_URL}/register`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({ username, password })\r\n      });\r\n  \r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        localStorage.setItem('token', data.token);\r\n        authForms.style.display = 'none';\r\n        authNav.style.display = 'none';\r\n        userNav.style.display = 'flex';\r\n        fetchNotes();\r\n      } else {\r\n        alert('Registration failed');\r\n      }\r\n    });\r\n  \r\n    logoutButton.addEventListener('click', () => {\r\n      localStorage.removeItem('token');\r\n      authNav.style.display = 'flex';\r\n      userNav.style.display = 'none';\r\n      notesContainer.innerHTML = '';\r\n      authForms.style.display = 'block';\r\n    });\r\n  \r\n    createNoteButton.addEventListener('click', () => {\r\n      noteForm.style.display = 'block';\r\n    });\r\n  \r\n    saveNoteButton.addEventListener('click', async () => {\r\n      const title = document.getElementById('note-title').value;\r\n      const content = document.getElementById('note-content').value;\r\n      const tags = document.getElementById('note-tags').value.split(',').map(tag => tag.trim());\r\n      const reminder = document.getElementById('note-reminder').value;\r\n      \r\n      const response = await fetch(`${API_BASE_URL}/notes`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${localStorage.getItem('token')}`\r\n        },\r\n        body: JSON.stringify({ title, content, tags, reminder, color: selectedColor })\r\n      });\r\n  \r\n      if (response.ok) {\r\n        const note = await response.json();\r\n        renderNote(note);\r\n        noteForm.style.display = 'none';\r\n      } else {\r\n        alert('Failed to save note');\r\n      }\r\n    });\r\n  \r\n    document.querySelectorAll('.color-btn').forEach(button => {\r\n      button.addEventListener('click', (event) => {\r\n        selectedColor = event.target.getAttribute('data-color');\r\n      });\r\n    });\r\n  \r\n    async function fetchNotes() {\r\n      const response = await fetch(`${API_BASE_URL}/notes`, {\r\n        headers: {\r\n          'Authorization': `Bearer ${localStorage.getItem('token')}`\r\n        }\r\n      });\r\n      const notes = await response.json();\r\n      notes.forEach(note => renderNote(note));\r\n    }\r\n  \r\n    function renderNote(note) {\r\n      const noteElement = document.createElement('div');\r\n      noteElement.className = 'note';\r\n      noteElement.style.backgroundColor = note.color;\r\n      noteElement.innerHTML = `\r\n        <div class=\"note-header\">\r\n          <h2>${note.title}</h2>\r\n          <div class=\"note-tags\">${note.tags.join(', ')}</div>\r\n        </div>\r\n        <p>${note.content}</p>\r\n        ${note.reminder ? `<p>Reminder: ${new Date(note.reminder).toLocaleString()}</p>` : ''}\r\n      `;\r\n      notesContainer.appendChild(noteElement);\r\n    }\r\n  \r\n    async function fetchReminders() {\r\n      notesContainer.innerHTML = '';\r\n      const response = await fetch(`${API_BASE_URL}/notes/reminders`, {\r\n        headers: {\r\n          'Authorization': `Bearer ${localStorage.getItem('token')}`\r\n        }\r\n      });\r\n      const notes = await response.json();\r\n      notes.forEach(note => renderNote(note));\r\n    }\r\n  \r\n    document.getElementById('view-reminders').addEventListener('click', fetchReminders);\r\n  \r\n    fetchNotes();\r\n  });\r\n  "],"sourceRoot":""}